package bot

import (
	"encoding/json"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"os"
	"path/filepath"
	"sync"
	"telegram-bot/internal/config"
	"telegram-bot/internal/database"
	"telegram-bot/pkg/telegram"
)

type MessagePart struct {
	Text  string  `json:"text"`
	Sleep float64 `json:"sleep"`
}

type QuickReplyRow struct {
	Buttons []QuickReply `json:"buttons"`
}

type State struct {
	Message      []MessagePart   `json:"message"`
	Buttons      []Button        `json:"buttons"`
	Images       []string        `json:"images"`
	Audio        []string        `json:"audio"`
	QuickReplies []QuickReplyRow `json:"quick_replies"` // –ò–∑–º–µ–Ω–∏–ª–∏ –Ω–∞ –º–∞—Å—Å–∏–≤ —Ä—è–¥–æ–≤
}

type QuickReply struct {
	Text      string `json:"text"`
	NextState string `json:"next_state"`
}

type Button struct {
	Text            string `json:"text"`
	NextState       string `json:"next_state"`
	RequiresPremium bool   `json:"requires_premium,omitempty"`
	FallbackState   string `json:"fallback_state,omitempty"`
}

type Bot struct {
	API      *telegram.TelegramClient
	DB       *database.DB
	states   map[string]State
	statesMu sync.RWMutex
}

func NewBot(api *telegram.TelegramClient, db *database.DB) *Bot {
	return &Bot{
		API:    api,
		DB:     db,
		states: make(map[string]State),
	}
}

// LoadConfig –∑–∞–≥—Ä—É–∂–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥
func (b *Bot) LoadConfig(configPath string) (*config.Config, error) {
	file, err := os.ReadFile(configPath)
	if err != nil {
		return nil, err
	}

	var config config.Config
	err = json.Unmarshal(file, &config)
	return &config, err
}

// LoadStates –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
func (b *Bot) LoadStates(config *config.Config) error {
	b.statesMu.Lock()
	defer b.statesMu.Unlock()

	// –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
	b.states = make(map[string]State)

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏–π
	for _, filePath := range config.Bot.StateFiles {
		absPath, err := filepath.Abs(filePath)
		if err != nil {
			return err
		}

		file, err := os.ReadFile(absPath)
		if err != nil {
			return err
		}

		var fileStates map[string]State
		if err := json.Unmarshal(file, &fileStates); err != nil {
			return err
		}

		// –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
		for k, v := range fileStates {
			b.states[k] = v
		}
	}

	return nil
}

// GetState –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ –∫–ª—é—á—É
func (b *Bot) GetState(key string) (State, bool) {
	b.statesMu.RLock()
	defer b.statesMu.RUnlock()
	s, exists := b.states[key]
	return s, exists
}

func (b *Bot) Start() {
	updates := b.API.GetUpdatesChan(tgbotapi.NewUpdate(0))

	for update := range updates {
		if update.Message != nil {
			b.handleMessage(update.Message)
		} else if update.CallbackQuery != nil {
			b.HandleCallbackQuery(update.CallbackQuery)
		}
	}
}
func (b *Bot) handleMessage(message *tgbotapi.Message) {
	chatID := message.Chat.ID
	username := message.From.UserName

	// –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	_, err := b.DB.GetOrCreateUser(chatID, username)
	if err != nil {
		b.API.SendHTMLMessage(chatID, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É /start
	if message.IsCommand() && message.Command() == "start" {
		if err := b.DB.SetUserState(chatID, "start"); err != nil {
			b.API.SendHTMLMessage(chatID, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			return
		}
		b.HandleState(chatID, "start")
		return
	}

	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ quick replies
	b.statesMu.RLock()
	defer b.statesMu.RUnlock()

	// –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ quick replies –∏–∑ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
	var allQuickReplies []QuickReply
	for _, state := range b.states {
		for _, row := range state.QuickReplies {
			allQuickReplies = append(allQuickReplies, row.Buttons...)
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ quick replies
	allQuickReplies = append(allQuickReplies, []QuickReply{
		{Text: "üß∞ –ì–∞–ª–µ—Ä–µ—è —ç–º–æ—Ü–∏–π", NextState: "all_emotions"},
		{Text: "üìö –î–Ω–µ–≤–Ω–∏–∫–∏", NextState: "diaries"},
		{Text: "üßò‚Äç‚ôÇÔ∏è –ú–µ–¥–∏—Ç–∞—Ü–∏–∏", NextState: "meditations"},
		{Text: "–ö—É–ø–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø üöÄ", NextState: "buy_access"},
	}...)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫–æ–π-–ª–∏–±–æ quick reply
	for _, btn := range allQuickReplies {
		if message.Text == btn.Text {
			b.HandleState(chatID, btn.NextState)
			return
		}
	}

	// –ï—Å–ª–∏ quick reply –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	currentState, err := b.DB.GetUserState(chatID)
	if err != nil {
		b.API.SendHTMLMessage(chatID, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
	switch currentState {
	case "start":
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		if err := b.DB.SetUserData(chatID, "Username", message.Text); err != nil {
			b.API.SendHTMLMessage(chatID, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			return
		}
		if err := b.DB.SetUserState(chatID, "user_name"); err != nil {
			b.API.SendHTMLMessage(chatID, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			return
		}
		b.HandleState(chatID, "user_name")
	default:
		// –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∏–∞–ª–æ–≥
		b.HandleState(chatID, currentState)
	}
}
