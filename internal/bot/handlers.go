// handlers.go
package bot

import (
	"database/sql"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"os"
	"strings"
	"telegram-bot/pkg/telegram"
	"time"
)

var db *sql.DB

func SetDatabase(database *sql.DB) {
	db = database
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥–ø–∏—Å–∫–∞
func isUserPremium(userID int64) (bool, error) {
	var isPremium bool
	fmt.Println(userID)
	err := db.QueryRow("SELECT is_premium FROM users WHERE id = $1", userID).Scan(&isPremium)
	if err != nil {
		if err == sql.ErrNoRows {
			return false, nil // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏
		}
		return false, err
	}
	return isPremium, nil
}

// HandleState –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
func HandleState(botAPI *telegram.TelegramClient, chatID int64, state string) {
	s, exists := GetState(state)
	if !exists {
		botAPI.SendHTMLMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userStates[chatID] = state

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —É—á–µ—Ç–æ–º –ø–æ–¥–ø–∏—Å–∫–∏
	var inlineKeyboard [][]tgbotapi.InlineKeyboardButton
	if len(s.Buttons) > 0 {
		for _, btn := range s.Buttons {
			// –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
			if btn.RequiresPremium {
				premium, err := isUserPremium(chatID)
				fmt.Println(premium)
				if err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: %v", err)
					continue
				}

				if !premium {
					// –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ fallback-—Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
					btn.NextState = btn.FallbackState
				}
			}

			inlineKeyboard = append(inlineKeyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(btn.Text, btn.NextState),
			))
		}
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
	for i, msgPart := range s.Message {
		// –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
		if i > 0 && s.Message[i-1].Sleep > 0 {
			time.Sleep(time.Duration(s.Message[i-1].Sleep * float64(time.Second)))
		}

		text := replaceTemplates(msgPart.Text, chatID)

		// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
		var replyMarkup interface{}
		if i == len(s.Message)-1 && len(inlineKeyboard) > 0 {
			replyMarkup = tgbotapi.NewInlineKeyboardMarkup(inlineKeyboard...)
		}

		// –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–¥–ø–∏—Å—å—é
		if i == 0 && len(s.Images) > 0 {
			for _, imgPath := range s.Images {
				if _, err := os.Stat(imgPath); err == nil {
					photo := tgbotapi.NewPhoto(chatID, tgbotapi.FilePath(imgPath))
					photo.Caption = text
					photo.ParseMode = "HTML"
					photo.ReplyMarkup = replyMarkup

					if err := botAPI.SendPhoto(photo); err != nil {
						log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: %v", err)
					}
					time.Sleep(300 * time.Millisecond)
				}
			}
		} else {
			// –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			msg := tgbotapi.NewMessage(chatID, text)
			msg.ParseMode = "HTML"
			msg.ReplyMarkup = replyMarkup

			botAPI.SendMessageWithMarkup(msg)
		}
	}
}

// HandleCallbackQuery –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
func HandleCallbackQuery(botAPI *telegram.TelegramClient, callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID
	nextState := callback.Data

	// –ò—â–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –ø—Ä–µ–º–∏—É–º-–∫–Ω–æ–ø–∫—É
	for _, state := range states {
		for _, btn := range state.Buttons {
			if btn.NextState == nextState && btn.RequiresPremium {
				premium, err := isUserPremium(chatID)
				if err != nil {
					botAPI.AnswerCallbackQuery(callback.ID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
					return
				}

				if !premium {
					nextState = btn.FallbackState
					botAPI.AnswerCallbackQuery(callback.ID, "üîí –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞")
				}
				break
			}
		}
	}

	botAPI.AnswerCallbackQuery(callback.ID)
	HandleState(botAPI, chatID, nextState)
}

// replaceTemplates –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
func replaceTemplates(text string, chatID int64) string {
	data, exists := userData[chatID]
	if !exists {
		return text
	}

	for key, value := range data {
		template := "{{" + key + "}}"
		text = strings.ReplaceAll(text, template, value)
	}

	return text
}
