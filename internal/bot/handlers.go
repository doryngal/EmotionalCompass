package bot

import (
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"os"
	"strings"
	"time"
)

// HandleState –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
func (b *Bot) HandleState(chatID int64, state string) {
	s, exists := b.GetState(state)
	if !exists {
		b.API.SendHTMLMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if err := b.DB.SetUserState(chatID, state); err != nil {
		b.API.SendHTMLMessage(chatID, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userData, err := b.DB.GetUserData(chatID)
	if err != nil {
		b.API.SendHTMLMessage(chatID, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	isPremium, err := b.DB.CheckUserPremium(chatID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: %v", err)
		isPremium = false
	}

	// –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ —Å —É—á–µ—Ç–æ–º –ø–æ–¥–ø–∏—Å–∫–∏
	var inlineKeyboard [][]tgbotapi.InlineKeyboardButton
	if len(s.Buttons) > 0 {
		for _, btn := range s.Buttons {
			// –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
			if btn.RequiresPremium && !isPremium {
				btn.Text += " üíé"
				// –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ fallback-—Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
				btn.NextState = btn.FallbackState
			}

			inlineKeyboard = append(inlineKeyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(btn.Text, btn.NextState),
			))
		}
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å quick replies
	showQuickReplies := !(state == "start" || state == "user_name")

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è quick replies (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
	var replyKeyboardMarkup *tgbotapi.ReplyKeyboardMarkup
	if len(s.QuickReplies) > 0 || showQuickReplies {
		quickReplies := s.QuickReplies
		if len(s.QuickReplies) > 0 {
			keyboard := createQuickReplyKeyboard(s.QuickReplies)
			replyMarkup := tgbotapi.NewReplyKeyboard(keyboard...)
			replyMarkup.ResizeKeyboard = true

			msg := tgbotapi.NewMessage(chatID, "ü™∑")
			msg.ReplyMarkup = replyMarkup
			b.API.SendMessageWithMarkup(msg)
		} else if len(quickReplies) == 0 {
			// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ quick replies (–≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ)
			quickReplies = []QuickReplyRow{
				{
					Buttons: []QuickReply{
						{Text: "ü´£ –ì–∞–ª–µ—Ä–µ—è —ç–º–æ—Ü–∏–π", NextState: "all_emotions"},
					},
				},
				{
					Buttons: []QuickReply{
						{Text: "üìö –î–Ω–µ–≤–Ω–∏–∫–∏", NextState: "diaries"},
						{Text: "üßò‚Äç‚ôÇÔ∏è –ú–µ–¥–∏—Ç–∞—Ü–∏–∏", NextState: "meditations"},
					},
				},
			}
			if !isPremium {
				quickReplies = append(quickReplies, QuickReplyRow{
					Buttons: []QuickReply{
						{Text: "–ö—É–ø–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø üöÄ", NextState: "buy_access"},
					},
				})
			}
		}
		keyboard := createQuickReplyKeyboard(quickReplies)
		replyMarkup := tgbotapi.NewReplyKeyboard(keyboard...)
		replyMarkup.ResizeKeyboard = true
		replyKeyboardMarkup = &replyMarkup
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
	for i, msgPart := range s.Message {
		// –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
		if i > 0 && s.Message[i].Sleep > 0 {
			time.Sleep(time.Duration(s.Message[i].Sleep * float64(time.Second)))
		}

		text := b.replaceTemplates(msgPart.Text, userData)

		// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
		var finalReplyMarkup interface{}
		if i == len(s.Message)-1 {
			if len(inlineKeyboard) > 0 {
				// –î–ª—è inline-–∫–Ω–æ–ø–æ–∫ —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
				finalReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(inlineKeyboard...)
			}
		}
		// –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–¥–ø–∏—Å—å—é
		if i == 0 && len(s.Images) > 0 {
			for _, imgPath := range s.Images {
				if _, err := os.Stat(imgPath); err == nil {
					photo := tgbotapi.NewPhoto(chatID, tgbotapi.FilePath(imgPath))
					photo.Caption = text
					photo.ParseMode = "HTML"
					photo.ReplyMarkup = finalReplyMarkup

					if err := b.API.SendPhoto(photo); err != nil {
						log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: %v", err)
					}
					time.Sleep(300 * time.Millisecond)
				}
			}
		} else if i == 0 && len(s.Audio) > 0 {
			for _, audioPath := range s.Audio {
				fmt.Println(audioPath)
				if _, err := os.Stat(audioPath); err == nil {
					audio := tgbotapi.NewAudio(chatID, tgbotapi.FilePath(audioPath))
					audio.Caption = text
					audio.ParseMode = "HTML"
					audio.ReplyMarkup = finalReplyMarkup
					audio.Title = "–ú–µ–¥–∏—Ç–∞—Ü–∏—è" // –ú–æ–∂–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–¥–∞–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ
					if err := b.API.SendAudio(audio); err != nil {

					}
					time.Sleep(300 * time.Millisecond)
				} else {
					log.Printf("–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", audioPath)
				}
			}
		} else {
			// –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			msg := tgbotapi.NewMessage(chatID, text)
			msg.ParseMode = "HTML"
			msg.ReplyMarkup = finalReplyMarkup

			b.API.SendMessageWithMarkup(msg)
		}
	}

	// –ï—Å–ª–∏ –µ—Å—Ç—å quick replies, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
	if replyKeyboardMarkup != nil {
		msg := tgbotapi.NewMessage(chatID, "ü™∑")
		msg.ReplyMarkup = replyKeyboardMarkup
		b.API.SendMessageWithMarkup(msg)
	}
}

// createQuickReplyKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è quick replies —Å —É—á–µ—Ç–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä—è–¥–æ–≤
func createQuickReplyKeyboard(replyRows []QuickReplyRow) [][]tgbotapi.KeyboardButton {
	var keyboard [][]tgbotapi.KeyboardButton

	for _, row := range replyRows {
		var keyboardRow []tgbotapi.KeyboardButton
		for _, btn := range row.Buttons {
			keyboardRow = append(keyboardRow, tgbotapi.NewKeyboardButton(btn.Text))
		}
		if len(keyboardRow) > 0 {
			keyboard = append(keyboard, keyboardRow)
		}
	}

	return keyboard
}

// HandleCallbackQuery –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
func (b *Bot) HandleCallbackQuery(callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID
	nextState := callback.Data

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	isPremium, err := b.DB.CheckUserPremium(chatID)
	if err != nil {
		b.API.AnswerCallbackQuery(callback.ID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
		return
	}

	// –ò—â–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –ø—Ä–µ–º–∏—É–º-–∫–Ω–æ–ø–∫—É
	b.statesMu.RLock()
	defer b.statesMu.RUnlock()

	for _, state := range b.states {
		for _, btn := range state.Buttons {
			if btn.NextState == nextState && btn.RequiresPremium && !isPremium {
				nextState = btn.FallbackState
				b.API.AnswerCallbackQuery(callback.ID, "üîí –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞")
				break
			}
		}
	}

	b.API.AnswerCallbackQuery(callback.ID)
	b.HandleState(chatID, nextState)
}

func (b *Bot) replaceTemplates(text string, data map[string]string) string {
	for key, value := range data {
		template := "{{" + key + "}}"
		text = strings.ReplaceAll(text, template, value)
	}
	return text
}
